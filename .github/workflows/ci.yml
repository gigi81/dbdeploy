name: Continuous Integration
on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches: [main]
permissions:
  contents: read
  actions: read
  checks: write
jobs:
  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Run Tests
        run: dotnet test --collect:"XPlat Code Coverage" --logger "GitHubActions" --logger "trx;LogFileName=test-results.trx" --filter DockerPlatform!=Linux /p:CoverletOutputFormat=opencover || true
      - name: Run Integration Tests
        run: dotnet test --collect:"XPlat Code Coverage" --logger "GitHubActions" --logger "trx;LogFileName=integration-results.trx" --filter DockerPlatform=Linux /p:CoverletOutputFormat=opencover || true
        if: runner.os == 'Linux'
      - name: Test Report
        uses: dorny/test-reporter@v1.9.1
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: "**/*-results.trx"
          reporter: dotnet-trx
          fail-on-error: true
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: Code coverage ${{ matrix.os }}
          path: "**/coverage.cobertura.xml"
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        if: runner.os == 'Linux'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  pack:
    name: Pack
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - name: Create packages
        run: dotnet pack --configuration Release --output ./packages
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: NuGet packages
          path: packages/*.*
  deploy:
    name: Deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [pack]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - uses: actions/download-artifact@v4
        with:
          name: NuGet packages
          path: packages
      - name: Push packages
        run: dotnet nuget push "packages/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
      - uses: dotnet/nbgv@v0.4.2
        id: nbgv
      - name: Push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          custom_tag: ${{ steps.nbgv.outputs.SemVer2 }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.nbgv.outputs.SemVer2 }}
          name: Release v${{ steps.nbgv.outputs.SemVer2 }}
          body: ${{ steps.tag_version.outputs.changelog }}
      - name: Comment relevant issues and merge requests
        uses: apexskier/github-release-commenter@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          comment-template: |
            This is addressed in release {release_link}.
          label-template: |
            state: released